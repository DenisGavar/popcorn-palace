// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// a movie table
model Movie {
  id            Int     @id @default(autoincrement())
  title         String  @unique
  genre         String
  duration      Int
  rating        Float
  releaseYear   Int     @map("release_year")

  createdAt     DateTime @default(now())  @map("created_at")
  updatedAt     DateTime @updatedAt       @map("updated_at")

  showtimes     Showtime[]

  // change the table name
  @@map("movies")
}

model Showtime {
  id            Int       @id @default(autoincrement())
  price         Float
  movieId       Int       @map("movie_id")
  movie         Movie     @relation(fields: [movieId], references: [id], onDelete: Cascade)
  theater       String
  startTime     DateTime  @map("start_time")
  endTime       DateTime  @map("end_time")

  createdAt     DateTime  @default(now())  @map("created_at")
  updatedAt     DateTime  @updatedAt       @map("updated_at")

  bookings      Booking[]

  // change the table name
  @@map("showtimes")
  // create an index for the search "No overlapping showtimes for the same theater"
  @@index([theater, startTime, endTime])
}

model Booking {
  id            String   @id @default(uuid())
  showtimeId    Int      @map("showtime_id")
  showtime      Showtime @relation(fields: [showtimeId], references: [id], onDelete: Cascade)
  seatNumber    Int      @map("seat_number")
  userId        String

  createdAt     DateTime @default(now())  @map("created_at")
  updatedAt     DateTime @updatedAt       @map("updated_at")

  // change the table name
  @@map("bookings")
  // ensure no seat is booked twice for the exact showtime
  @@unique([showtimeId, seatNumber])
}